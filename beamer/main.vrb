\frametitle{Python code to Plot curves}
  \begin{mintedbox}{Python}[break at=.8\textheight]
import sys  # for path to external scripts
sys.path.insert(0, '/Users/hanumac/Desktop/github/matgeo/codes/coordgeo')  # path to my scripts
import numpy as np
import numpy.linalg as LA
import matplotlib.pyplot as plt

# local imports
from line.funcs import *
from triangle.funcs import *
from conics.funcs import circ_gen

# Load the points from the text file generated by the C code
points = np.loadtxt("points.txt", delimiter=',')

# Extract the x and y coordinates
x = points[:, 0]
y = points[:, 1]

# Separate the positive and negative branches of the parabola
x_positive = x[y >= 0]  # X values where y is positive
y_positive = y[y >= 0]  # Positive Y values

x_negative = x[y < 0]   # X values where y is negative
y_negative = y[y < 0]   # Negative Y values

# line parameters
A = np.array(([0, 0]))  # point A
B = np.array(([9, 9]))  # point B
m = np.array(([1, 1])).reshape(-1, 1)  # direction vector of line

# generate line points
line_points = line_dir_pt(m, A.reshape(-1, 1), 10, -3)

# Plot
plt.figure()

# Plot the positive branch of the parabola
plt.plot(x_positive, y_positive, label=r'$y^2 = 9x$', color='green', linewidth=1)

# Plot the negative branch of the parabola
plt.plot(x_negative, y_negative, color='green', linewidth=1)

plt.gca().set_aspect('equal', adjustable='box')

# Plot the line y = x
plt.plot(line_points[0, :], line_points[1, :], label="$ y = x $", color="red", linewidth=1)

# Fill the area between the parabola and the line from x=0 to x=9
x_fill = np.linspace(0, 9, 500)  # X values between 0 and 9
y_parabola = np.sqrt(9 * x_fill)  # Y values for the positive branch of the parabola
y_line = x_fill  # Y values for the line y = x

plt.fill_between(x_fill, y_line, y_parabola, color='blue', alpha=0.5, label='Area between parabola and line')

# Creating coordinates for labeling
tri_coords = np.array([[A[0], B[0]], [A[1], B[1]]])  #array for points
plt.scatter(tri_coords[0, :], tri_coords[1, :], color='black') #Plot points
vert_labels = ['$A$', '$B$']

# Annotate the points using the provided syntax
for i, txt in enumerate(vert_labels):
    plt.annotate(f'{txt}\n({tri_coords[0,i]:.0f}, {tri_coords[1,i]:.0f})',
                 (tri_coords[0,i], tri_coords[1,i]),  # point to label
                 textcoords="offset points",  # position of text
                 xytext=(0, 10),  # distance from text to points (x,y)
                 ha='center')  # horizontal alignment

# Label the axes
plt.xlabel("x")
plt.ylabel("y")
plt.title("Parabola $y^2 = 9x$ and line $y=x$")
plt.grid(True)
plt.legend()
plt.show()
  \end{mintedbox}
